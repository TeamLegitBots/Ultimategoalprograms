package org.firstinspires.ftc.teamcode.Autonomous;


import com.acmerobotics.roadrunner.geometry.Pose2d;
import com.acmerobotics.roadrunner.geometry.Vector2d;
import com.acmerobotics.roadrunner.trajectory.Trajectory;
import com.acmerobotics.roadrunner.trajectory.constraints.AngularVelocityConstraint;
import com.acmerobotics.roadrunner.trajectory.constraints.MecanumVelocityConstraint;
import com.acmerobotics.roadrunner.trajectory.constraints.MinVelocityConstraint;
import com.acmerobotics.roadrunner.trajectory.constraints.ProfileAccelerationConstraint;
import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.util.ElapsedTime;

import org.firstinspires.ftc.robotcore.external.hardware.camera.WebcamName;
import org.firstinspires.ftc.teamcode.HardwareMap.LegitbotV1;
import org.firstinspires.ftc.teamcode.drive.DriveConstants;
import org.firstinspires.ftc.teamcode.drive.SampleMecanumDrive;
import org.opencv.core.Core;
import org.opencv.core.Mat;
import org.opencv.core.Point;
import org.opencv.core.Rect;
import org.opencv.core.Scalar;
import org.opencv.imgproc.Imgproc;
import org.openftc.easyopencv.OpenCvCamera;
import org.openftc.easyopencv.OpenCvCameraFactory;
import org.openftc.easyopencv.OpenCvCameraRotation;
import org.openftc.easyopencv.OpenCvPipeline;

import java.util.Arrays;


@Autonomous(name = "Auto23")
//@Disabled
public class AutoV3 extends LinearOpMode {

    OpenCvCamera phoneCam;
    SkystoneDeterminationPipeline pipeline;

    public static double SkystonePlacement = 0;
    LegitbotV1 robot = new LegitbotV1();   // Use a Pushbot's hardware
    double speed = .95;
    double slowspeed = .5;
    double shootingspeed = 0.95;

    private final Object runningNotifier = new Object();



    private ElapsedTime runtime = new ElapsedTime();
    @Override
    public void runOpMode() throws InterruptedException {

        int cameraMonitorViewId = hardwareMap.appContext.getResources().getIdentifier("cameraMonitorViewId", "id", hardwareMap.appContext.getPackageName());
        phoneCam = OpenCvCameraFactory.getInstance().createWebcam(hardwareMap.get(WebcamName.class, "Webcam 1"), cameraMonitorViewId);
        pipeline = new SkystoneDeterminationPipeline();
        phoneCam.setPipeline(pipeline);

        phoneCam.openCameraDeviceAsync(new OpenCvCamera.AsyncCameraOpenListener() {
            @Override
            public void onOpened() {
                phoneCam.startStreaming(320, 240, OpenCvCameraRotation.SIDEWAYS_RIGHT);
            }
        });

        SampleMecanumDrive drive = new SampleMecanumDrive(hardwareMap);
        drive.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);

        robot.init(hardwareMap);

        ElapsedTime runtime = new ElapsedTime();
        robot.Wgoalarm.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        robot.Wgoalarm.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        robot.WheelOutake.setMode(DcMotor.RunMode.RUN_USING_ENCODERS);

        SkystoneDeterminationPipeline.RingPosition position = SkystoneDeterminationPipeline.RingPosition.FOUR;
        position = pipeline.position;

        telemetry.addData("Analysis", pipeline.getAnalysis());
        telemetry.addData("Position", position);
        telemetry.update();

//no ring trajectories
        Trajectory traj1 = drive.trajectoryBuilder(new Pose2d(0, 0))
                .splineTo(new Vector2d(63, -17), 0)
                .build();
        Trajectory traj2 = drive.trajectoryBuilder(traj1.end())
                .lineToLinearHeading(new Pose2d(80, 0, Math.toRadians(90)))
                .build();
        Trajectory traj3 = drive.trajectoryBuilder(traj2.end())
                .back(6)
                .build();
        Trajectory traj4 = drive.trajectoryBuilder(traj3.end())
                .lineToLinearHeading(new Pose2d(37, -27, Math.toRadians(180)))
                .build();
        Trajectory traj5 = drive.trajectoryBuilder(traj4.end())
                .forward(6)
                .build();
        Trajectory traj6 = drive.trajectoryBuilder(traj5.end())
                .lineToLinearHeading(new Pose2d(75, -10 , Math.toRadians(90)))
                .build();
        Trajectory traj7 = drive.trajectoryBuilder(traj6.end())
                .lineToLinearHeading(new Pose2d(80,-66, Math.toRadians(0)))
                .build();


//one ring trajectories
        Trajectory one_traj1 = drive.trajectoryBuilder(new Pose2d(0, 0))
                .forward(63)
                .build();
        Trajectory one_traj2 = drive.trajectoryBuilder(one_traj1.end())
                .strafeTo(new Vector2d(63, -12))
                .build();
        Trajectory one_traj3 = drive.trajectoryBuilder(one_traj2.end(),true)
                .splineTo(new Vector2d(38,-14), Math.toRadians(-220))
                .build();
        Trajectory one_traj4 = drive.trajectoryBuilder(one_traj3.end())
                .splineTo(new Vector2d(63, -12), Math.toRadians(0))
                .build();
        Trajectory one_traj5 = drive.trajectoryBuilder(one_traj4.end())
                .lineToLinearHeading(new Pose2d(93, -16, Math.toRadians(0)))
                .build();
        Trajectory one_traj6 = drive.trajectoryBuilder(one_traj5.end())
                .back(6)
                .build();
        Trajectory one_traj7 = drive.trajectoryBuilder(one_traj6.end())
                .lineToLinearHeading(new Pose2d(37, -30, Math.toRadians(180)))
                .build();

        Trajectory one_traj7_0 = drive.trajectoryBuilder(one_traj7.end())
                .forward(6)
                .build();


        /*Trajectory one_traj8 = drive.trajectoryBuilder(one_traj7.end())
                .strafeTo(new Vector2d(20, -17))
                .build();

         */
        Trajectory one_traj9 = drive.trajectoryBuilder(one_traj7_0.end())
                .lineToLinearHeading(new Pose2d(88, -20, Math.toRadians(0)))
                .build();
        Trajectory one_traj9_0 = drive.trajectoryBuilder(one_traj9.end())
                .back(6)
                .build();
        Trajectory one_traj10 = drive.trajectoryBuilder(one_traj9_0.end())
                .lineToConstantHeading(new Vector2d(75,-50))
                .build();


        //four ring trajectories
        Trajectory four_traj_1 = drive.trajectoryBuilder(new Pose2d(0, 0))
                .forward(65)
                .build();
        Trajectory four_traj_2 = drive.trajectoryBuilder(four_traj_1.end())
                .strafeTo(new Vector2d(65, -17))
                .build();

        Trajectory four_traj_3 = drive.trajectoryBuilder(four_traj_2.end(),true)
                .strafeTo(new Vector2d(65,-14))
                .build();

        Trajectory four_traj_4 = drive.trajectoryBuilder(four_traj_3.end())
                .back(7,
                        new MinVelocityConstraint(
                                Arrays.asList(
                                        new AngularVelocityConstraint(DriveConstants.MAX_ANG_VEL),
                                        new MecanumVelocityConstraint(15, DriveConstants.TRACK_WIDTH)
                                )
                        ),
                        new ProfileAccelerationConstraint(DriveConstants.MAX_ACCEL)
                )
                .build();

        Trajectory four_traj_5 = drive.trajectoryBuilder(four_traj_4.end())
                .lineToConstantHeading(new Vector2d(65, -17))
                .build();

        Trajectory four_traj0 = drive.trajectoryBuilder(four_traj_5.end())
                .strafeTo(new Vector2d(65,-14))
                .build();

        Trajectory four_traj1 = drive.trajectoryBuilder(four_traj0.end())
                .back(30,
                        new MinVelocityConstraint(
                                Arrays.asList(
                                        new AngularVelocityConstraint(DriveConstants.MAX_ANG_VEL),
                                        new MecanumVelocityConstraint(25, DriveConstants.TRACK_WIDTH)
                                )
                        ),
                        new ProfileAccelerationConstraint(DriveConstants.MAX_ACCEL)
                )

                .build();
        Trajectory four_traj2 = drive.trajectoryBuilder((four_traj1.end()))
                .lineToConstantHeading(new Vector2d(65,-17))
                .build();
        Trajectory four_traj3 = drive.trajectoryBuilder(four_traj2.end())
                .lineToConstantHeading(new Vector2d(117, 0))
                .build();
        Trajectory four_traj4 = drive.trajectoryBuilder(four_traj3.end())
                .lineToConstantHeading(new Vector2d(87, -22))
                .build();


    robot.Wgoalservo.setPosition(0);
        waitForStart();
        drive.setPoseEstimate(new Pose2d(0, 0, Math.toRadians(0)));


        //code goes here
        runtime.reset();

        position = pipeline.position;

        telemetry.addData("Analysis", pipeline.getAnalysis());
        telemetry.addData("Position", position);
        telemetry.update();



        robot.WheelOutake.setPower(1);

        sleep(2000);

        if (position == SkystoneDeterminationPipeline.RingPosition.NONE) {
            drive.followTrajectory(traj1);
            robot.WheelOutake.setPower(shootingspeed);
            sleep(200);
            robot.Ring_gate.setPosition(.55);
            sleep(200);
            robot.Ring_gate.setPosition(.8);
            sleep(200);

            robot.Ring_gate.setPosition(.55);
            sleep(200);
            robot.Ring_gate.setPosition(.8);
            sleep(200);

            robot.Ring_gate.setPosition(.55);
            sleep(200);
            robot.Ring_gate.setPosition(.8);
            sleep(200);

            robot.Ring_gate.setPosition(.55);
            sleep(200);
            robot.Ring_gate.setPosition(.8);

            robot.WheelOutake.setPower(0);

            drive.followTrajectory(traj2);

            robot.Wgoalarm.setTargetPosition(robot.Wgoalarm.getCurrentPosition() - 1700);
            robot.Wgoalarm.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            robot.Wgoalarm.setPower(-1);
            sleep(10);
            while (robot.Wgoalarm.isBusy() && opModeIsActive()) {
            }
            robot.Wgoalarm.setPower(0);

            robot.Wgoalservo.setPosition(1);
            sleep(1000);

            drive.followTrajectory(traj3);

            drive.followTrajectory(traj4);

            drive.followTrajectory(traj5);

            robot.Wgoalservo.setPosition(0);
            sleep(2000);

            drive.followTrajectory(traj6);


            robot.Wgoalservo.setPosition(1);
            sleep(1000);

            drive.followTrajectory(traj7);
        }

        if (position == SkystoneDeterminationPipeline.RingPosition.ONE) {

            drive.followTrajectory(one_traj1);
            drive.followTrajectory(one_traj2);
            //robot drives to shooting positions
            robot.Backservo.setPosition(.75);

            robot.Ring_gate.setPosition(.55);
            sleep(200);
            robot.Ring_gate.setPosition(.8);
            sleep(200);

            robot.Ring_gate.setPosition(.55);
            sleep(200);
            robot.Ring_gate.setPosition(.8);
            sleep(200);

            robot.Ring_gate.setPosition(.55);
            sleep(200);
            robot.Ring_gate.setPosition(.8);

            sleep(200);

            robot.Ring_gate.setPosition(.55);
            sleep(200);
            robot.Ring_gate.setPosition(.8);

            robot.WheelOutake.setPower(0);
            //robot shoots rings
            robot.Intake.setPower(1);
            robot.Pulley.setPower(-1);

            //robot moves back to get ring
            drive.followTrajectory(one_traj3);
            robot.WheelOutake.setPower(1);
            sleep(1000);
            drive.followTrajectory(one_traj4);

            //robot shoots ring
            robot.Ring_gate.setPosition(.55);
            sleep(200);
            robot.Ring_gate.setPosition(.8);

            robot.WheelOutake.setPower(0);
            robot.Intake.setPower(0);
            robot.Pulley.setPower(0);

            //robot goes to drop zone
            drive.followTrajectory(one_traj5);

            //robot drops wobble goal

            robot.Wgoalarm.setTargetPosition(robot.Wgoalarm.getCurrentPosition() - 1700);
            telemetry.addData("2","1");
            telemetry.update();
            robot.Wgoalarm.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            telemetry.addData("3","1");
            telemetry.update();
            robot.Wgoalarm.setPower(-1);
            if (robot.Wgoalarm.isBusy()){
                telemetry.addData("is","busy");
                telemetry.update();
            } else {
                telemetry.addData("is","not so busy");
                telemetry.update();
            }
            sleep(10);

            while (robot.Wgoalarm.isBusy() && opModeIsActive()) {

            }
            robot.Wgoalarm.setPower(0);

            robot.Wgoalservo.setPosition(1);
            sleep(1000);
            //robot goes to second wobble goal
            drive.followTrajectory(one_traj6);
            drive.followTrajectory(one_traj7);
            drive.followTrajectory(one_traj7_0);
            //drive.followTrajectory(one_traj8);

            //robot gets wobble goal
            robot.Wgoalservo.setPosition(0);
            sleep(1000);

            drive.followTrajectory(one_traj9);

            robot.Wgoalservo.setPosition(1);
            sleep(500);

            drive.followTrajectory(one_traj9_0);

            drive.followTrajectory(one_traj10);





        }
        if (position == SkystoneDeterminationPipeline.RingPosition.FOUR) {
            drive.followTrajectory(four_traj_1);
            drive.followTrajectory(four_traj_2);//Drives to optimal shooting range

            robot.Backservo.setPosition(.75);

            robot.Ring_gate.setPosition(.55);
            sleep(500);
            robot.Ring_gate.setPosition(.8);
            sleep(500);

            robot.Ring_gate.setPosition(.55);
            sleep(500);
            robot.Ring_gate.setPosition(.8);
            sleep(500);

            robot.Ring_gate.setPosition(.55);
            sleep(500);
            robot.Ring_gate.setPosition(.8);

            robot.WheelOutake.setPower(0);

            robot.Intake.setPower(-1);  //shoot rings
            robot.Pulley.setPower(-1);

            drive.followTrajectory(four_traj_3); //splines to get one ring
            drive.followTrajectory(four_traj_4);
            robot.WheelOutake.setPower(1);
            sleep(1000);
            drive.followTrajectory(four_traj_5);

            robot.Ring_gate.setPosition(.55);
            sleep(500);
            robot.Ring_gate.setPosition(.8);

            robot.WheelOutake.setPower(0);

            drive.followTrajectory(four_traj0);
            drive.followTrajectory(four_traj1);
            sleep(1000);
            robot.WheelOutake.setPower(1);
            sleep(1000);
            drive.followTrajectory(four_traj2);

            robot.Ring_gate.setPosition(.55);
            sleep(500);
            robot.Ring_gate.setPosition(.8);
            sleep(500);

            robot.Ring_gate.setPosition(.55);
            sleep(500);
            robot.Ring_gate.setPosition(.8);
            sleep(500);

            robot.Ring_gate.setPosition(.55);
            sleep(500);
            robot.Ring_gate.setPosition(.8);

            robot.WheelOutake.setPower(0);
            robot.Intake.setPower(0);
            robot.Pulley.setPower(0);

            drive.followTrajectory(four_traj3);
            robot.Wgoalservo.setPosition(1);
            sleep(500);
            drive.followTrajectory(four_traj4);
        }
        robot.Wgoalarm.setTargetPosition(robot.Wgoalarm.getCurrentPosition() + 1700);
        robot.Wgoalarm.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        robot.Wgoalarm.setPower(1);
        sleep(10);
        while (robot.Wgoalarm.isBusy() && opModeIsActive()) {
        }
        robot.Wgoalarm.setPower(0);
    }

    //@Override
    public void startIntake(int speed, int time) {
        robot.Intake.setPower(speed);
        sleep(time);
    }

    //@Override
    public void startOutake(int speed, int time) {
        robot.WheelOutake.setPower(speed);
        sleep(time);

    }

    public static class SkystoneDeterminationPipeline extends OpenCvPipeline
    {
        /*
         * An enum to define the skystone position
         */
        public enum RingPosition
        {
            FOUR,
            ONE,
            NONE
        }

        /*
         * Some color constants
         */
        static final Scalar BLUE = new Scalar(0, 0, 255);
        static final Scalar GREEN = new Scalar(0, 255, 0);

        /*
         * The core values which define the location and size of the sample regions
         */
        static final Point REGION1_TOPLEFT_ANCHOR_POINT = new Point(45,160);

        static final int REGION_WIDTH = 2;
        static final int REGION_HEIGHT = 40;

        final int FOUR_RING_THRESHOLD = 147;
        final int ONE_RING_THRESHOLD = 128;

        Point region1_pointA = new Point(
                REGION1_TOPLEFT_ANCHOR_POINT.x,
                REGION1_TOPLEFT_ANCHOR_POINT.y);
        Point region1_pointB = new Point(
                REGION1_TOPLEFT_ANCHOR_POINT.x + REGION_WIDTH,
                REGION1_TOPLEFT_ANCHOR_POINT.y + REGION_HEIGHT);

        /*
         * Working variables
         */
        Mat region1_Cb;
        Mat YCrCb = new Mat();
        Mat Cb = new Mat();
        int avg1;

        // Volatile since accessed by OpMode thread w/o synchronization
        private volatile RingPosition position = RingPosition.FOUR;

        /*
         * This function takes the RGB frame, converts to YCrCb,
         * and extracts the Cb channel to the 'Cb' variable
         */
        void inputToCb(Mat input)
        {
            Imgproc.cvtColor(input, YCrCb, Imgproc.COLOR_RGB2YCrCb);
            Core.extractChannel(YCrCb, Cb, 1);
        }

        @Override
        public void init(Mat firstFrame)
        {
            inputToCb(firstFrame);

            region1_Cb = Cb.submat(new Rect(region1_pointA, region1_pointB));
        }

        @Override
        public Mat processFrame(Mat input)
        {
            inputToCb(input);

            avg1 = (int) Core.mean(region1_Cb).val[0];

            Imgproc.rectangle(
                    input, // Buffer to draw on
                    region1_pointA, // First point which defines the rectangle
                    region1_pointB, // Second point which defines the rectangle
                    BLUE, // The color the rectangle is drawn in
                    2); // Thickness of the rectangle lines

            position = RingPosition.FOUR; // Record our analysis
            if(avg1 > FOUR_RING_THRESHOLD){
                position = RingPosition.FOUR;
            }else if (avg1 > ONE_RING_THRESHOLD){
                position = RingPosition.ONE;
            }else{
                position = RingPosition.NONE;
            }

            Imgproc.rectangle(
                    input, // Buffer to draw on
                    region1_pointA, // First point which defines the rectangle
                    region1_pointB, // Second point which defines the rectangle
                    GREEN, // The color the rectangle is drawn in
                    -1); // Negative thickness means solid fill

            return input;
        }

        public int getAnalysis()
        {
            return avg1;
        }
    }
}
