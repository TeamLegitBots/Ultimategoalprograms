package org.firstinspires.ftc.teamcode.Autonomous;




import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.CRServo;
import com.qualcomm.robotcore.hardware.ColorSensor;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.HardwareMap;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.util.ElapsedTime;

import org.firstinspires.ftc.robotcore.external.hardware.camera.WebcamName;
import org.firstinspires.ftc.teamcode.EasyOpenCVExample;
import org.firstinspires.ftc.teamcode.HardwareMap.LegitbotV1;
import org.opencv.core.Core;
import org.opencv.core.Mat;
import org.opencv.core.Point;
import org.opencv.core.Rect;
import org.opencv.core.Scalar;
import org.opencv.imgproc.Imgproc;
import org.openftc.easyopencv.OpenCvCamera;
import org.openftc.easyopencv.OpenCvCameraFactory;
import org.openftc.easyopencv.OpenCvCameraRotation;
import org.openftc.easyopencv.OpenCvPipeline;


@Autonomous (name = "Parking")
//@Disabled
public class Parking extends LinearOpMode {

    OpenCvCamera phoneCam;
    Parking.SkystoneDeterminationPipeline pipeline;

    public static double SkystonePlacement = 0;
    LegitbotV1 robot = new LegitbotV1();   // Use a Pushbot's hardware
    double robotSpeed = .6;
    double strafeSpeed = .6;

    private final Object       runningNotifier = new Object();



    private ElapsedTime runtime = new ElapsedTime();
    @Override
    public void runOpMode() throws InterruptedException {

        int cameraMonitorViewId = hardwareMap.appContext.getResources().getIdentifier("cameraMonitorViewId", "id", hardwareMap.appContext.getPackageName());
        phoneCam = OpenCvCameraFactory.getInstance().createWebcam(hardwareMap.get(WebcamName.class, "Webcam 1"), cameraMonitorViewId);
        pipeline = new Parking.SkystoneDeterminationPipeline();
        phoneCam.setPipeline(pipeline);

        phoneCam.openCameraDeviceAsync(new OpenCvCamera.AsyncCameraOpenListener()
        {
            @Override
            public void onOpened()
            {
                phoneCam.startStreaming(320,240, OpenCvCameraRotation.SIDEWAYS_RIGHT);
            }
        });

        robot.init(hardwareMap);

        ElapsedTime  runtime = new ElapsedTime();

        robot.Wgoalarm.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        robot.WheelOutake.setMode(DcMotor.RunMode.RUN_USING_ENCODERS);

        Parking.SkystoneDeterminationPipeline.RingPosition position = Parking.SkystoneDeterminationPipeline.RingPosition.FOUR;
        position = pipeline.position;

        telemetry.addData("Analysis", pipeline.getAnalysis());
        telemetry.addData("Position", position);
        telemetry.update();



        waitForStart();



        //code goes here
        runtime.reset();

        while (runtime.time() < 1 && opModeIsActive()) {
             position = pipeline.position;

            telemetry.addData("Analysis", pipeline.getAnalysis());
            telemetry.addData("Position", position);
            telemetry.update();

            sleep(50);
        }


        robot.Wgoalarm.setTargetPosition(robot.Wgoalarm.getCurrentPosition() + 500);
        robot.Wgoalarm.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        while(robot.Wgoalarm.isBusy()&&opModeIsActive()) {
            robot.Wgoalarm.setPower(1);
        }
        robot.Wgoalarm.setPower(0);

        robot.Wgoalservo.setPosition(0);
        sleep(2000);

        robot.driveForward(1,60);
        sleep(250);
        robot.strafeRight(1,21);
        sleep(250);
        robot.Backservo.setPosition(1);
        sleep(250);
        robot.Backservo.setPosition(0);
        sleep(500);
        robot.Ring_gate.setPosition(2.5);
        sleep(500);

        telemetry.addData("ring_gate pos", robot.Ring_gate.getPosition());
        telemetry.update();
        robot.Backservo.setPosition(1);
        sleep(250);
        robot.Backservo.setPosition(0);
        sleep(500);


        robot.WheelOutake.setPower(0.485);
        sleep(1000);
        robot.Pulley.setPower(1);
        sleep(500);
        robot.Pulley.setPower(0);
        //robot.WheelOutake.setPower(0);

        robot.strafeRight(1,4);

        //robot.WheelOutake.setPower(0.5);
        robot.WheelOutake.setPower(0.485);
        sleep(1000);
        robot.Pulley.setPower(1);
        sleep(500);
        robot.Pulley.setPower(0);


        robot.strafeRight(1,5);
        robot.WheelOutake.setPower(0.48);
        sleep(1000);
        robot.Pulley.setPower(1);
        sleep(750);
        robot.Pulley.setPower(0);
        robot.WheelOutake.setPower(0);





        if (position == Parking.SkystoneDeterminationPipeline.RingPosition.NONE){
            robot.turnRight(1,180);
            sleep(250);
            robot.strafeRight(1, 48);
            robot.Wgoalservo.setPosition(1);
            sleep(2000);
            robot.strafeLeft(1, 20);
            sleep(250);
            robot.driveBack(1,6);
        }

        if (position == Parking.SkystoneDeterminationPipeline.RingPosition.ONE){
            robot.turnRight(1,180);
            sleep(250);
            robot.strafeRight(1, 30);
            sleep(250);
            robot.driveBack(1, 30);
            robot.Wgoalservo.setPosition(1);
            sleep(2000);
            robot.strafeLeft(1, 24);
            sleep(250);
            robot.driveForward(1, 18);

        }
        if (position == Parking.SkystoneDeterminationPipeline.RingPosition.FOUR){
            robot.turnLeft(1,90);
            sleep(250);
            robot.driveForward(1, 48);
            sleep(250);
            robot.strafeRight(1,54);
            robot.Wgoalservo.setPosition(1);
            sleep(2000);
            robot.strafeLeft(1,36);
            sleep(250);
            robot.driveBack(1, 26);

        }

        robot.Wgoalservo.setPosition(0);
        sleep(2000);

        robot.Wgoalarm.setTargetPosition(robot.Wgoalarm.getCurrentPosition() - 500);
        robot.Wgoalarm.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        while(robot.Wgoalarm.isBusy()&&opModeIsActive()) {
            robot.Wgoalarm.setPower(-1);
        }
        robot.Wgoalarm.setPower(0);





    }
    //@Override
    public void startIntake(int speed, int time) {
        robot.Intake.setPower(speed);
        sleep(time);
    }

    //@Override
    public void startOutake(int speed, int time) {
        robot.WheelOutake.setPower(speed);
        sleep(time);

    }

    public static class SkystoneDeterminationPipeline extends OpenCvPipeline
    {
        /*
         * An enum to define the skystone position
         */
        public enum RingPosition
        {
            FOUR,
            ONE,
            NONE
        }

        /*
         * Some color constants
         */
        static final Scalar BLUE = new Scalar(0, 0, 255);
        static final Scalar GREEN = new Scalar(0, 255, 0);

        /*
         * The core values which define the location and size of the sample regions
         */
        static final Point REGION1_TOPLEFT_ANCHOR_POINT = new Point(75,160);

        static final int REGION_WIDTH = 35;
        static final int REGION_HEIGHT = 40;

        final int FOUR_RING_THRESHOLD = 147;
        final int ONE_RING_THRESHOLD = 135;

        Point region1_pointA = new Point(
                REGION1_TOPLEFT_ANCHOR_POINT.x,
                REGION1_TOPLEFT_ANCHOR_POINT.y);
        Point region1_pointB = new Point(
                REGION1_TOPLEFT_ANCHOR_POINT.x + REGION_WIDTH,
                REGION1_TOPLEFT_ANCHOR_POINT.y + REGION_HEIGHT);

        /*
         * Working variables
         */
        Mat region1_Cb;
        Mat YCrCb = new Mat();
        Mat Cb = new Mat();
        int avg1;

        // Volatile since accessed by OpMode thread w/o synchronization
        private volatile Parking.SkystoneDeterminationPipeline.RingPosition position = Parking.SkystoneDeterminationPipeline.RingPosition.FOUR;

        /*
         * This function takes the RGB frame, converts to YCrCb,
         * and extracts the Cb channel to the 'Cb' variable
         */
        void inputToCb(Mat input)
        {
            Imgproc.cvtColor(input, YCrCb, Imgproc.COLOR_RGB2YCrCb);
            Core.extractChannel(YCrCb, Cb, 1);
        }

        @Override
        public void init(Mat firstFrame)
        {
            inputToCb(firstFrame);

            region1_Cb = Cb.submat(new Rect(region1_pointA, region1_pointB));
        }

        @Override
        public Mat processFrame(Mat input)
        {
            inputToCb(input);

            avg1 = (int) Core.mean(region1_Cb).val[0];

            Imgproc.rectangle(
                    input, // Buffer to draw on
                    region1_pointA, // First point which defines the rectangle
                    region1_pointB, // Second point which defines the rectangle
                    BLUE, // The color the rectangle is drawn in
                    2); // Thickness of the rectangle lines

            position = Parking.SkystoneDeterminationPipeline.RingPosition.FOUR; // Record our analysis
            if(avg1 > FOUR_RING_THRESHOLD){
                position = Parking.SkystoneDeterminationPipeline.RingPosition.FOUR;
            }else if (avg1 > ONE_RING_THRESHOLD){
                position = Parking.SkystoneDeterminationPipeline.RingPosition.ONE;
            }else{
                position = Parking.SkystoneDeterminationPipeline.RingPosition.NONE;
            }

            Imgproc.rectangle(
                    input, // Buffer to draw on
                    region1_pointA, // First point which defines the rectangle
                    region1_pointB, // Second point which defines the rectangle
                    GREEN, // The color the rectangle is drawn in
                    -1); // Negative thickness means solid fill

            return input;
        }

        public int getAnalysis()
        {
            return avg1;
        }
    }
}



