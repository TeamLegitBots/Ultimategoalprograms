package org.firstinspires.ftc.teamcode;
import com.acmerobotics.roadrunner.geometry.Pose2d;
import com.acmerobotics.roadrunner.geometry.Vector2d;
import com.acmerobotics.roadrunner.trajectory.Trajectory;
import com.acmerobotics.roadrunner.trajectory.constraints.AngularVelocityConstraint;
import com.acmerobotics.roadrunner.trajectory.constraints.MecanumVelocityConstraint;
import com.acmerobotics.roadrunner.trajectory.constraints.MinVelocityConstraint;
import com.acmerobotics.roadrunner.trajectory.constraints.ProfileAccelerationConstraint;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;
import org.firstinspires.ftc.teamcode.HardwareMap.LegitbotV1;
import org.firstinspires.ftc.teamcode.drive.DriveConstants;
import org.firstinspires.ftc.teamcode.drive.SampleMecanumDrive;

import java.util.Arrays;

@TeleOp(name = "ASTeleopTwoP")
//@Disabled
public class TeleopV2 extends LinearOpMode {
    LegitbotV1 robot = new LegitbotV1();
    double sensitivity = 1;
    @Override
    public void runOpMode() throws InterruptedException {
        SampleMecanumDrive drive = new SampleMecanumDrive(hardwareMap);
        drive.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
        robot.init(hardwareMap);
        telemetry.addData("right bumper1", gamepad1.right_bumper);
        telemetry.update();
        robot.WheelOutake.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        robot.Wgoalarm.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
        robot.Intake.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        robot.Pulley.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        /*
        robot.FrontRight.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        robot.FrontLeft.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        robot.BackLeft.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        robot.BackRight.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
*/
        robot.Wgoalarm.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);

        double shooterspeed = .75;
        double powershotspeed = .7;
        long sleep_time = 200;
        waitForStart();

        while (opModeIsActive()) {

            if (gamepad2.right_stick_x >.5) {             //intake rings
                robot.Intake.setPower(1);
                robot.Pulley.setPower(-1);
            } else if (gamepad2.right_stick_x < -.5) {   //outtake rings
                robot.Intake.setPower(-1);
                robot.Pulley.setPower(1);
            } else{
                robot.Intake.setPower(0);
                robot.Pulley.setPower(0);
            }


            //close WGarm servo
            if (gamepad2.a) {
                robot.Wgoalservo.setPosition(0);
            };
            //open WGarm servo
            if (gamepad2.b) {
                robot.Wgoalservo.setPosition(1);
            };
            //reset encoders
            if (gamepad1.b) {
                drive.setPoseEstimate(new Pose2d(0, 0, Math.toRadians(0)));
            }
            // automatic shooting
            if (gamepad1.y) {
                robot.WheelOutake.setPower(shooterspeed);
                robot.Intake.setPower(1);
                robot.Pulley.setPower(-1);
                drive.setMotorPowers(0, 0, 0, 0);
                Pose2d myPose = drive.getPoseEstimate();
                Trajectory myTrajectory = drive.trajectoryBuilder(myPose)
                        .lineToLinearHeading(new Pose2d(0, 0, Math.toRadians(0)))
                        .build();
                drive.followTrajectory(myTrajectory);
                robot.Ring_gate.setPosition(.55);
                sleep(sleep_time);
                robot.Ring_gate.setPosition(.8);
                sleep(sleep_time);
                robot.Ring_gate.setPosition(.55);
                sleep(sleep_time);
                robot.Ring_gate.setPosition(.8);
                sleep(sleep_time);
                robot.Ring_gate.setPosition(.55);
                sleep(sleep_time);
                robot.Ring_gate.setPosition(.8);
            }
            if(gamepad2.dpad_up) {   //raise WGarm
                robot.Wgoalarm.setPower(1);
            } else if(gamepad2.dpad_down){   //lower WG arm
                robot.Wgoalarm.setPower(-1);
            } else{
                robot.Wgoalarm.setPower(0);
            }

            if (gamepad1.left_stick_button){   // lower the robot's speed if the left stick is pressed
                sensitivity = .5;
            } else {
                sensitivity = 1;
            }

            drive.setWeightedDrivePower(  //set drive motor powers
                    new Pose2d(
                            -gamepad1.left_stick_y * sensitivity,
                            -gamepad1.left_stick_x * sensitivity,
                            -gamepad1.right_stick_x * sensitivity
                    )
            );
            if (gamepad2.right_trigger>.5) {    //turn on shooter to power shot shooting speed
                robot.WheelOutake.setPower(powershotspeed);
            } else
            if (gamepad2.left_stick_y < -.5) {     //turn on shooter to regular shooting speed
                robot.WheelOutake.setPower(shooterspeed);
            }
            else {
                robot.WheelOutake.setPower(0);
            }
            //manual shooting
            if (gamepad2.x) {
                robot.Ring_gate.setPosition(.55);
            } else {
                robot.Ring_gate.setPosition(.8);
            }

            //update robot position
            drive.update();
            //automated power shots
            if (gamepad1.x) {
                drive.setMotorPowers(0,0,0,0);
                robot.WheelOutake.setPower(powershotspeed);

                drive.setPoseEstimate(new Pose2d(0, 0, Math.toRadians(0)));
                Pose2d myPose = drive.getPoseEstimate();


                Trajectory powershot1 = drive.trajectoryBuilder(myPose)
                        .lineToLinearHeading(new Pose2d(-3, 10, Math.toRadians(7)),
                                new MinVelocityConstraint(
                                        Arrays.asList(
                                                new AngularVelocityConstraint(DriveConstants.MAX_ANG_VEL),
                                                new MecanumVelocityConstraint(15, DriveConstants.TRACK_WIDTH)
                                        )
                                ),
                                new ProfileAccelerationConstraint(DriveConstants.MAX_ACCEL)
                        )
                        .build();
                /*
                Trajectory powershot2 = drive.trajectoryBuilder(powershot1.end())
                        .strafeTo(new Vector2d(0,25),
                                new MinVelocityConstraint(
                                        Arrays.asList(
                                                new AngularVelocityConstraint(DriveConstants.MAX_ANG_VEL),
                                                new MecanumVelocityConstraint(15, DriveConstants.TRACK_WIDTH)
                                        )
                                ),
                                new ProfileAccelerationConstraint(DriveConstants.MAX_ACCEL)
                        )
                        .build();
                Trajectory powershot3 = drive.trajectoryBuilder(powershot2.end())
                        .strafeTo(new Vector2d(0,29),
                                new MinVelocityConstraint(
                                        Arrays.asList(
                                                new AngularVelocityConstraint(DriveConstants.MAX_ANG_VEL),
                                                new MecanumVelocityConstraint(15, DriveConstants.TRACK_WIDTH)
                                        )
                                ),
                                new ProfileAccelerationConstraint(DriveConstants.MAX_ACCEL)
                        )
                        .build();
*/
                drive.followTrajectory(powershot1);  // strafe and shoot right powershot
                robot.Ring_gate.setPosition(.55);
                sleep(200);
                robot.Ring_gate.setPosition(.8);
                drive.turn(Math.toRadians(8));
                //drive.followTrajectory(powershot2);   //strafe and shoot middle powershot
                robot.Ring_gate.setPosition(.55);
                sleep(200);
                robot.Ring_gate.setPosition(.8);
                drive.turn(Math.toRadians(7));
               // drive.followTrajectory(powershot3);  //strafe and shoot left powershot
                robot.Ring_gate.setPosition(.55);
                sleep(200);
                robot.Ring_gate.setPosition(.8);
                sleep(200);
                robot.Ring_gate.setPosition(.55);
                sleep(200);
                robot.Ring_gate.setPosition(.8);






            }
        }
    }
}
